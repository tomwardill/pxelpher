from pxelpher.protocol.dhcp import (
    DHCPPacket,
    PacketMode,
)
from pxelpher.server import send_offer


sample_discover_packet = b"\x01\x01\x06\x00&\xf3\x039\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\xb8'\xeb\x9b\x08\x88\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00c\x82Sc5\x01\x017\x0e+<C\x80\x81\x82\x83\x84\x85\x86\x87B\x01\x03]\x02\x00\x00^\x03\x01\x02\x01a\x11\x00\x88\x08\x9bI\x88\x08\x9bI\x88\x08\x9bI\x88\x08\x9bI< PXEClient:Arch:00000:UNDI:002001\xff"


def test_hardware_address():
    packet = DHCPPacket.from_network(sample_discover_packet)
    assert packet.hardware_address == 'b8:27:eb:9b:08:88'


def test_is_broadcast():
    assert True is True


def test_magic_cookie():
    packet = DHCPPacket.from_network(sample_discover_packet)
    assert packet.magic_cookie == '99.130.83.99'


def test_packet_type_parsing():
    packet = DHCPPacket.from_network(sample_discover_packet)
    assert packet.mode == PacketMode.DISCOVER


def test_make_offer():
    discover_packet = DHCPPacket.from_network(sample_discover_packet)
    send_offer(None, discover_packet)
